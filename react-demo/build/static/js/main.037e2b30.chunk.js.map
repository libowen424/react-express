{"version":3,"sources":["api/ajax.js","api/index.js","utils/memoryUtils.js","utils/storageUtils.js","pages/login/login.jsx","pages/home/index.jsx","pages/user/index.jsx","config/menuConfig.js","pages/role/index.jsx","pages/order/appointOrder/index.jsx","pages/order/deliverOrder/index.jsx","utils/dateUtils.js","layout/index.jsx","pages/regist/index.jsx","App.js","index.js"],"names":["ajax","url","data","type","Promise","resolve","reject","promise","axios","get","params","post","then","response","catch","error","message","productionBASE","login","regist","reqRoles","addRole","roleName","name","getRoleById","roleId","_id","addUser","user","USER_KEY","store","set","remove","Header","Content","Footer","Login","onFinish","values","a","username","password","res","console","log","code","memoryUtils","storeUtils","props","history","replace","to","className","this","Item","rules","required","prefix","UserOutlined","placeholder","LockOutlined","htmlType","style","color","textAlign","Component","Home","Option","User","state","users","roles","isShow","showAdd","setState","setTimeout","formRef","current","setFieldsValue","showUpdate","deleteUser","confirm","title","onOk","status","success","getUsers","initColumns","columns","dataIndex","render","roleNames","find","onClick","initRoleNames","reduce","pre","role","getRoles","addOrUpdateUser","getFieldsValue","updateUserInfo","cancelAddRoleModel","React","createRef","bordered","rowKey","dataSource","pagination","defaultPageSize","visible","onCancel","labelCol","span","wrapperCol","ref","label","autoComplete","value","map","menuList","icon","HomeTwoTone","key","isPublic","CopyTwoTone","children","SettingTwoTone","TreeNode","Role","selectedRole","isShowAdd","isShowAuth","checkedKeys","initColum","onRow","event","onrowSelect","record","result","showUpdateRole","menus","getFieldValue","resetFields","getTreeNodes","item","push","onTreeCheck","updateRole","authName","authTime","String","Date","storageUtils","disabled","treeChilren","rowSelection","selectedRowKeys","onSelect","checkable","defaultExpandAll","treeData","onCheck","AppointOrder","DeliverOrder","formateDate","time","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","SubMenu","Sider","TotalLayout","currentTime","now","AuthMenus","getTime","intervalId","setInterval","exit","ExclamationCircleOutlined","content","getRolesById","hasAuth","indexOf","child","getMenuNodes","path","location","pathname","cItem","openKey","getTitle","forEach","clearInterval","menuNodes","padding","height","width","theme","mode","selectedKeys","defaultOpenKeys","minHeight","component","formItemLayout","xs","sm","tailFormItemLayout","offset","Regist","goBack","prefixSelector","noStyle","initialValues","scrollToFirstError","tooltip","whitespace","hasFeedback","Password","dependencies","validator","_","Error","App","ReactDom","document","getElementById"],"mappings":"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","file":"static/js/main.037e2b30.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {message} from 'antd'\r\n\r\n/**\r\n * 封装ajax请求，返回的是一个promise对象\r\n */\r\nexport default function ajax(url,data={},type='GET'){\r\n    return new Promise((resolve, reject) => {\r\n        let promise\r\n    switch(type)\r\n    {\r\n        case 'GET':\r\n            promise =  axios.get(url,{\r\n                params:data\r\n            })\r\n            break;\r\n        case 'POST':\r\n            promise = axios.post(url,data)\r\n            break;\r\n    }\r\n    promise.then(response => {\r\n        resolve(response)\r\n      // 3. 如果失败了, 不调用reject(reason), 而是提示异常信息\r\n      }).catch(error => {\r\n        // reject(error)\r\n        message.error('请求出错了: ' + error.message)\r\n      })\r\n})\r\n}","import ajax from './ajax'\r\n\r\n/**\r\n * 封装接口\r\n */\r\n\r\nconst BASE = '/api1'\r\nconst productionBASE = 'http://localhost:3000'\r\n\r\nexport const login = (data)=>{\r\n   return ajax(productionBASE+'/users/login',data,'POST')\r\n}\r\n\r\nexport const regist = (data)=>{\r\n    return ajax(productionBASE+ '/users/regist',data,'POST')\r\n}\r\nexport const reqRoles = ()=>{\r\n    return ajax(productionBASE+'/role/getAll',null,'POST')\r\n}\r\n\r\nexport const addRole = (roleName)=>{\r\n    return ajax(productionBASE+'/role/add',{name:roleName},'POST')\r\n}\r\n\r\nexport const updateRole = (role)=>{\r\n    return ajax(productionBASE+'/role/update',role,'POST')\r\n}\r\n\r\nexport const getRoleById = (roleId)=>{\r\n    return ajax(productionBASE+'/role/getById',{_id:roleId},'POST')\r\n}\r\nexport const getAllUsers = ()=>{\r\n    return ajax(productionBASE+'/users/getAll',null,'POST')\r\n}\r\n\r\nexport const deleteUser = (_id)=>{\r\n    return ajax(productionBASE+'/users/delete',{_id:_id},'POST')\r\n}\r\n\r\nexport const addUser = (user)=>{\r\n    return ajax(productionBASE+'/users/regist',user,'POST')\r\n}\r\n\r\nexport const updateUser = (user)=>{\r\n    return ajax(productionBASE+'/users/update',user,'POST')\r\n}","/**\r\n * 用来在内存中保存一些数据的工具模块\r\n * 问题是每次刷新都会刷新内存，这就需要维持登录\r\n */\r\n\r\nexport default {\r\n    user:{} //保存当前登录的的user\r\n}","/**\r\n * 将数据存入localStorage中永久保存\r\n * 利用store库\r\n */\r\nimport store from 'store'\r\n\r\nconst USER_KEY = 'user_key'\r\nexport default\r\n{\r\n    /**\r\n     * 保存user\r\n     */\r\n    saveUser(user)\r\n    {\r\n    //    localStorage.setItem(USER_KEY,JSON.stringify(user)) \r\n        store.set(USER_KEY,user)\r\n    },\r\n    /**\r\n     * 读取user\r\n     */\r\n    getUser(){\r\n        // return JSON.parse(localStorage.getItem(USER_KEY)||'{}')\r\n        return store.get(USER_KEY)||{}\r\n    },\r\n    /**\r\n     * 删除user\r\n     */\r\n    removeUser()\r\n    {\r\n        // localStorage.removeItem(USER_KEY)\r\n        store.remove(USER_KEY)\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Layout } from 'antd';\r\nimport './login.less';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport {Link, Redirect} from 'react-router-dom'\r\nimport {login} from'../../api/index'\r\nimport { message } from 'antd';\r\nimport memoryUtils from '../../utils/memoryUtils.js';\r\nimport storeUtils from '../../utils/storageUtils'\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\n/**\r\n * 登录的路由组件\r\n */\r\nclass Login extends Component {\r\n    \r\n    onFinish = async (values) => {\r\n        // console.log('Received values of form: ', values);\r\n        const data = {\r\n            'username':values.username,\r\n            'password':values.password\r\n        }\r\n        let res = await login(data)\r\n        console.log(res.data)\r\n        if(res.data.code===200)\r\n        {\r\n            const user = res.data.data\r\n            //将user保存到内存\r\n            memoryUtils.user= user\r\n            //将user保存到local中\r\n            storeUtils.saveUser(user)\r\n            this.props.history.replace(\r\n                '/'\r\n            )\r\n        }\r\n        else\r\n        {\r\n            message.error('登录失败');\r\n        }\r\n      };\r\n\r\n    render() {\r\n\r\n        /**\r\n         * 判断是否登录\r\n         * 如果用户已经登陆，跳转到home\r\n         */\r\n        const user = memoryUtils.user\r\n        if(user&&user._id)\r\n        {\r\n            return (\r\n                <Redirect to='/home'></Redirect>\r\n            )\r\n        }\r\n\r\n        return (\r\n        <div className=\"login\">\r\n        <Layout className=\"layout\">\r\n            <Header className=\"header\">\r\n              <div className=\"logo\" />\r\n            </Header>\r\n            <Content className=\"content\">\r\n                <Form\r\n                    name=\"normal_login\"\r\n                    className=\"login-form\"\r\n                    // initialValues={{\r\n                    //     remember: true,\r\n                    // }}\r\n                    onFinish={this.onFinish}\r\n                    >\r\n                    <Form.Item\r\n                        name=\"username\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your Username!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"password\"\r\n                        rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please input your Password!',\r\n                        },\r\n                        ]}\r\n                    >\r\n                        <Input\r\n                        prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        />\r\n                    </Form.Item>\r\n                    {/* <Form.Item>\r\n                        <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                        <Checkbox>Remember me</Checkbox>\r\n                        </Form.Item>\r\n\r\n                        <span className=\"login-form-forgot\" href=\"\">\r\n                        Forgot password\r\n                        </span>\r\n                    </Form.Item> */}\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                        </Button>\r\n                        Or \r\n                        <Link to='/regist' style={{color:'blue'}}>\r\n                        register now!\r\n                        </Link>\r\n                    </Form.Item>\r\n                    </Form>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>Blog System By lbw424</Footer>\r\n        </Layout>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\n\r\n\r\nclass Home extends Component {\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                Home\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component,useState  } from 'react';\r\nimport {\r\n    Card,\r\n    Button,\r\n    Table,\r\n    Modal,\r\n    message,\r\n} from 'antd'\r\nimport { getAllUsers, reqRoles, deleteUser, addUser, updateUser } from '../../api';\r\nimport { Form, Input,  Select } from 'antd';\r\nconst { Option } = Select;\r\nconst Item = Form.Item\r\n\r\nclass User extends Component {\r\n    constructor()\r\n    {\r\n        super()\r\n        this.getUsers()\r\n        this.getRoles()\r\n        this.initColumns()\r\n    }\r\n\r\n    state ={\r\n        users: [], // 所有用户列表\r\n        roles: [], // 所有角色列表\r\n        isShow: false, // 是否显示确认框\r\n    }\r\n\r\n\r\n    /*\r\n    显示添加界面\r\n    */\r\n    showAdd = () => {\r\n        this.user = null // 去除前面保存的user\r\n        // console.log(this.formRef.current)\r\n        this.setState({isShow: true})\r\n        setTimeout(() => {\r\n            this.formRef.current.setFieldsValue({\r\n                username:null,\r\n                password:null,\r\n                roleId:null\r\n            })\r\n        },200);\r\n    }\r\n\r\n    /*\r\n    显示修改界面\r\n    */\r\n    showUpdate = (user) => {\r\n        // console.log(user)\r\n        this.user = user // 保存user\r\n        this.setState({\r\n        isShow: true\r\n        })\r\n        // console.log(this.formRef.current)\r\n        setTimeout(() => {\r\n            this.formRef.current.setFieldsValue({\r\n                username:user.username,\r\n                password:user.password,\r\n                roleId:user.roleId\r\n            })\r\n        }, 200);\r\n\r\n    }\r\n\r\n    deleteUser=async (user)=>{\r\n\r\n        Modal.confirm({\r\n            title: `确认删除${user.username}吗?`,\r\n            onOk: async () => {\r\n                let result = await deleteUser(user._id)\r\n                if(result.status===200) {\r\n                message.success('删除用户成功!')\r\n                this.getUsers()\r\n              }\r\n            }\r\n          })\r\n\r\n    }\r\n    initColumns = () => {\r\n        this.columns = [\r\n        {\r\n            title: '用户名',\r\n            dataIndex: 'username'\r\n        },\r\n        {\r\n            title: '密码',\r\n            dataIndex: 'password'\r\n        },\r\n        {\r\n            title: '所属角色',\r\n            dataIndex: 'roleId',\r\n            render: (roleId) => {\r\n                if(this.roleNames)\r\n                {\r\n                    return this.roleNames[roleId]\r\n                }\r\n                else\r\n                {\r\n                return ''\r\n                }\r\n            }\r\n        },\r\n        {\r\n            title: '操作',\r\n            dataIndex:'_id',\r\n            render: (_id) =>\r\n            {\r\n                const user = this.state.users.find((user)=>user._id===_id)\r\n                // console.log(user)\r\n                return (\r\n                <span>\r\n                    <Button onClick={() => this.showUpdate(user)}>修改</Button>\r\n                    <Button onClick={() => this.deleteUser(user)}>删除</Button>\r\n                </span>\r\n                )\r\n            }\r\n        },\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * 根据roles的数组生成所有包含角色名的对象\r\n     * {roleid,roleName}\r\n     */\r\n    initRoleNames=(roles)=>\r\n    {\r\n        let roleNames = roles.reduce((pre,role)=>{\r\n            pre[role._id]=role.name\r\n            return pre\r\n        },{})\r\n        this.roleNames = roleNames\r\n        // console.log(this.roleNames)\r\n    }\r\n    getUsers = async()=>{\r\n        let res = await getAllUsers()\r\n        // console.log(res.data.data)\r\n        if(res.data.code===200)\r\n        {\r\n            this.setState({\r\n                users:res.data.data\r\n            })\r\n        }\r\n    }\r\n    getRoles = async ()=>{\r\n        let res = await reqRoles()\r\n        // console.log(res)\r\n        if(res.data.code ===200)\r\n        {\r\n            this.setState({\r\n                roles:res.data.data\r\n            })\r\n            this.initRoleNames(res.data.data)\r\n        }\r\n    }\r\n\r\n    addOrUpdateUser = async ()=>{\r\n        console.log(this.formRef.current.getFieldsValue())\r\n        const updateUserInfo = this.formRef.current.getFieldsValue()\r\n        this.setState({isShow: false})\r\n        if(this.user)\r\n        {\r\n            this.user.username=updateUserInfo.username\r\n            this.user.password=updateUserInfo.password\r\n            this.user.roleId=updateUserInfo.roleId\r\n            // console.log('this.user',this.user)\r\n\r\n            let res = await updateUser(this.user)\r\n            // console.log(res)\r\n        }\r\n        else\r\n        {\r\n           let res = await addUser(updateUserInfo)\r\n        //    console.log(res)\r\n        }\r\n        this.getUsers()\r\n    }\r\n\r\n    cancelAddRoleModel=()=>{\r\n        this.setState({isShow: false})\r\n    }\r\n\r\n    //用户操作表单数据\r\n    formRef = React.createRef();\r\n    componentDidMount()\r\n    {\r\n\r\n    }\r\n    \r\n    render() {\r\n        \r\n        const {users, isShow, roles} = this.state\r\n\r\n        const title = <Button type='primary' onClick={this.showAdd}>创建用户</Button>\r\n       \r\n        const user = this.user || {}\r\n\r\n        const layout = {\r\n            labelCol: {\r\n              span: 4,\r\n            },\r\n            wrapperCol: {\r\n              span: 16,\r\n            },\r\n          };\r\n        return (\r\n            <Card title={title}>\r\n                <Table\r\n                bordered\r\n                rowKey='_id'\r\n                dataSource={users}\r\n                columns={this.columns}\r\n                pagination={{defaultPageSize: 5}}\r\n                />\r\n        \r\n\r\n            <Modal\r\n                title={user._id ? '修改用户' : '添加用户'}\r\n                visible={isShow}\r\n                onOk={this.addOrUpdateUser}\r\n                onCancel={this.cancelAddRoleModel}\r\n            >\r\n                <Form {...layout} ref={this.formRef} name=\"user\">\r\n                    <Item name='username' label='用户名'\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                },\r\n                                ]}\r\n                    >\r\n                        <Input autoComplete=\"off\"  value={user.name}/>\r\n                    </Item>\r\n\r\n                    <Item name='password' label='密码'\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                },\r\n                                ]}\r\n                    >\r\n                        <Input autoComplete=\"off\"  value={user.password} />\r\n                    </Item>\r\n\r\n                    <Item name='roleId' label='角色'\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                },\r\n                                ]}\r\n                    >\r\n                        <Select>\r\n                            {\r\n                            roles.map(role => <Option key={role._id} value={role._id}>{role.name}</Option>)\r\n                            }\r\n                        </Select>\r\n                    </Item>\r\n                </Form>\r\n            </Modal>\r\n\r\n          </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;","import { HomeTwoTone ,UserOutlined, CopyTwoTone,SettingTwoTone} from '@ant-design/icons';\r\n\r\n/**\r\n * 导航菜单配置\r\n * 根据这个配置进行动态渲染导航路由\r\n * title：导航名\r\n * icon：导航的图标\r\n * key：对应的路由\r\n */\r\n\r\nconst menuList = [\r\n    {\r\n        title:'首页',//菜单标题名称\r\n        icon:<HomeTwoTone />,//图标的名称\r\n        key:'/home',//对应的path\r\n        isPublic:true//设置为公开，都能查看\r\n    },\r\n    {\r\n        title:'订单管理',\r\n        icon:<CopyTwoTone />,\r\n        key:'/order',\r\n        children:[\r\n            {\r\n                title:'上门订单',\r\n                icon:<CopyTwoTone />,\r\n                key:'/order/appointOrder',\r\n            },\r\n            {\r\n                title:'投递订单',\r\n                icon:<CopyTwoTone />,\r\n                key:'/order/deliverOrder',\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title:'用户管理',\r\n        icon:<UserOutlined />,\r\n        key:'/user',\r\n    },\r\n    {\r\n        title:'权限管理',\r\n        icon:<SettingTwoTone />,\r\n        key:'/role',\r\n    }\r\n]\r\n\r\nexport default menuList","import React, { Component } from 'react';\r\nimport {\r\n    Card,\r\n    Button,\r\n    Table,\r\n    Modal,\r\n    Form, Input,\r\n    Tree ,\r\n    message\r\n  } from 'antd'\r\nimport {reqRoles,addRole} from '../../api/index'\r\nimport menuList from '../../config/menuConfig'\r\nimport {updateRole} from '../../api/index'\r\nimport memoryUtils from '../../utils/memoryUtils.js'\r\nimport storageUtils from '../../utils/storageUtils'\r\n\r\nconst { TreeNode } = Tree;\r\n\r\nconst Item = Form.Item\r\n\r\nclass Role extends Component {\r\n\r\n    state = \r\n    {\r\n        //角色数组\r\n        roles:[],\r\n        //选中的角色\r\n        selectedRole:{},\r\n        //是否显示窗口\r\n        isShowAdd:false,\r\n        isShowAuth:false,\r\n        //选中的角色对应的被选中的按钮\r\n        checkedKeys:[]\r\n    }\r\n\r\n\r\n    //初始化列名\r\n    initColum = () =>{\r\n        this.columns = [\r\n            {\r\n                title:'角色名称',\r\n                dataIndex:'name'\r\n            },\r\n            // {\r\n            //     title:'创建时间',\r\n            //     dataIndex:'name'\r\n            // },            \r\n            {\r\n                title:'授权时间',\r\n                dataIndex:'authTime'\r\n            },            {\r\n                title:'授权人',\r\n                dataIndex:'authName'\r\n            },\r\n        ]\r\n    }\r\n\r\n    //选择Table某一行\r\n    onRow = (role)=>{\r\n        // console.log(role)\r\n        return{\r\n            onClick: event =>{\r\n                //点击行\r\n                // console.log('row onClick()', role)\r\n                this.setState({\r\n                    selectedRole:role\r\n                })\r\n                // console.log(this.state.selectedRole)\r\n            }\r\n        }\r\n    }\r\n\r\n    //选择按钮某一行\r\n    onrowSelect =(record)=>\r\n    {\r\n        // console.log(record)\r\n        this.setState({\r\n            selectedRole:record\r\n        })\r\n    }\r\n\r\n    //用户操作表单数据\r\n    formRef = React.createRef();\r\n        \r\n    //获取角色数据\r\n    getRoles = async ()=>{\r\n        // debugger\r\n        const result = await reqRoles()\r\n        if(result.data.code==200)\r\n        {\r\n            const roles = result.data.data\r\n            this.setState({\r\n                roles,\r\n            })\r\n        }\r\n        // console.log(result,'@')\r\n    }\r\n\r\n    //显示更新弹窗\r\n    showUpdateRole=()=>{\r\n        this.setState({isShowAuth:true})\r\n        //根据选中角色的菜单初始化树状列表\r\n        const {menus} = this.state.selectedRole\r\n        this.setState({\r\n            checkedKeys:menus\r\n        })\r\n    }\r\n\r\n    //添加角色\r\n    addRole= async ()=>\r\n    {\r\n        // console.log(this.formRef.current.getFieldValue())\r\n        const {roleName} = this.formRef.current.getFieldValue()\r\n        // console.log(roleName)\r\n        let res = await addRole(roleName)\r\n        console.log(res)\r\n        if(res.data.code===200)\r\n        {\r\n        this.getRoles()\r\n        this.cancelAddRoleModel()\r\n        }\r\n    }\r\n\r\n    //取消弹窗\r\n    cancelAddRoleModel = () => {\r\n        this.setState({isShowAdd: false})\r\n        this.formRef.current.resetFields();\r\n    }\r\n\r\n    //根据动他路由表获取TreeNodes\r\n    getTreeNodes= (menuList)=>{\r\n        return menuList.reduce((pre,item)=>{\r\n            pre.push(\r\n                {\r\n                    title:item.title,\r\n                    key:item.key,\r\n                    children:item.children? this.getTreeNodes(item.children):null\r\n                }\r\n            )\r\n            return pre\r\n        },[])\r\n    }\r\n\r\n    //树状列表被选中后进行更新\r\n    onTreeCheck= checkedKeys =>{\r\n        this.setState({\r\n            checkedKeys\r\n        })\r\n        // console.log('checkedKeys',checkedKeys)\r\n        // console.log('选中角色的菜单',this.state.selectedRole.menus)\r\n    }\r\n\r\n    //更新角色的权限\r\n    updateRole=async ()=>{\r\n        let {selectedRole,checkedKeys} = this.state\r\n        selectedRole.menus=checkedKeys\r\n        let res = await updateRole({_id:selectedRole._id,authName:memoryUtils.user.username,authTime:String(new Date()),menus:checkedKeys})\r\n        // console.log(res)\r\n        if(res.data.code===200)\r\n        {\r\n            //如果当前更新的是自己的角色\r\n            //强制退出\r\n\r\n            if(selectedRole._id === memoryUtils.user.roleId)\r\n            {\r\n                memoryUtils.user={}\r\n                storageUtils.removeUser()\r\n                this.props.history.replace('/login')\r\n                message.success('当前用户角色权限修改了，请重新登录');\r\n            }\r\n            else\r\n            {\r\n                message.success('角色权限修改成功');\r\n                this.setState({isShowAuth: false})\r\n                this.getRoles()\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor(){\r\n        super()\r\n        this.getRoles()\r\n        this.initColum()\r\n    }\r\n\r\n    render() {\r\n        const {roles,selectedRole ,isShowAdd,isShowAuth ,checkedKeys} = this.state\r\n\r\n        const title = (\r\n            <span>\r\n              <Button type='primary' onClick={()=>{this.setState({isShowAdd:true})}}>创建角色</Button> &nbsp;&nbsp;\r\n              <Button type='primary' onClick={this.showUpdateRole} disabled={!selectedRole._id}>设置角色权限</Button>\r\n            </span>\r\n          )\r\n\r\n        /**\r\n         * Addform所需样式\r\n         */\r\n        const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n        };\r\n\r\n        // updataForm Item布局的配置对象\r\n        const formItemLayout = {\r\n            labelCol: { span: 4 },  // 左侧label的宽度\r\n            wrapperCol: { span: 15 }, // 右侧包裹的宽度\r\n        }\r\n        \r\n        const treeChilren = this.getTreeNodes(menuList)\r\n        // console.log(treeChilren)\r\n        \r\n        return (\r\n            <Card title={title}>\r\n                <Table\r\n                rowSelection={{type:'radio', selectedRowKeys:[selectedRole._id],onSelect:this.onrowSelect}}\r\n                bordered\r\n                rowKey='_id'\r\n                dataSource={roles}\r\n                columns={this.columns}\r\n                pagination={{defaultPageSize:5}}\r\n                onRow={this.onRow}\r\n                />\r\n\r\n                <Modal\r\n                    title=\"添加角色\"\r\n                    visible={isShowAdd}\r\n                    onOk={this.addRole}\r\n                    onCancel={\r\n                        this.cancelAddRoleModel\r\n                    }\r\n                    >\r\n                          <Form\r\n                          ref={this.formRef}\r\n                            {...layout}\r\n                            name=\"basic\"\r\n                            >\r\n                            <Form.Item\r\n                                label=\"roleName\"\r\n                                name=\"roleName\"\r\n                                rules={[{ required: true, message: 'Please input your roleName!' }]}\r\n                            >\r\n                                <Input  autoComplete=\"off\"  />\r\n                            </Form.Item>\r\n\r\n                        </Form>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    title=\"设置角色权限\"\r\n                    visible={isShowAuth}\r\n                    onOk={this.updateRole}\r\n                    onCancel={() => {\r\n                        this.setState({isShowAuth: false})\r\n                    }}\r\n                    >\r\n                    <div>\r\n                        <Item label='角色名称' {...formItemLayout}>\r\n                        <Input value={selectedRole.name} disabled/>\r\n                        </Item> \r\n\r\n                        <Tree\r\n                            checkable\r\n                            defaultExpandAll={true}\r\n                            checkedKeys={checkedKeys}\r\n                            treeData={[\r\n                                {\r\n                                title:\"平台权限\",key:'all',\r\n                                children:treeChilren\r\n                                }\r\n                            ]}\r\n                            onCheck={\r\n                                this.onTreeCheck\r\n                            }\r\n                        >\r\n\r\n                        </Tree>\r\n                    </div>\r\n\r\n                </Modal>\r\n\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Role;","import React, { Component } from 'react';\r\n\r\nclass AppointOrder extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                AppointOrder\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppointOrder;","import React, { Component } from 'react';\r\n\r\nclass DeliverOrder extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                DeliverOrder\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeliverOrder;","/*\r\n包含n个日期时间处理的工具函数模块\r\n*/\r\n\r\n/*\r\n  格式化日期\r\n*/\r\nexport function formateDate(time) {\r\n  if (!time) return ''\r\n  let date = new Date(time)\r\n  return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()\r\n    + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()\r\n}","import React, { Component } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport './index.less'\r\nimport {Route, Redirect, Switch, Link} from 'react-router-dom'\r\nimport Home from '../pages/home/index'\r\nimport User from '../pages/user/index'\r\nimport Role from '../pages/role/index'\r\nimport AppointOrder from '../pages/order/appointOrder/index'\r\nimport DeliverOrder from '../pages/order/deliverOrder/index'\r\nimport memoryUtils from '../utils/memoryUtils.js'\r\nimport storageUtils from '../utils/storageUtils.js'\r\nimport { Modal, Button, Space } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport menuList from '../config/menuConfig'\r\nimport {formateDate} from '../utils/dateUtils'\r\nimport {getRoleById} from '../api/index'\r\nconst { confirm } = Modal;\r\nconst { SubMenu } = Menu;\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\n/**\r\n * 总布局，项目中其他页面内容都渲染到该组件中的content部分中\r\n */\r\nclass TotalLayout extends Component {\r\n\r\n    \r\n    state = {\r\n        currentTime: formateDate(Date.now()), // 当前时间字符串\r\n        AuthMenus:[]\r\n    }\r\n\r\n    getTime = () => {\r\n        // 每隔1s获取当前时间, 并更新状态数据currentTime\r\n        this.intervalId = setInterval(() => {\r\n          const currentTime = formateDate(Date.now())\r\n          this.setState({currentTime})\r\n        }, 1000)\r\n      }\r\n\r\n    //登出\r\n    exit=()=>\r\n    {\r\n        confirm({\r\n            title: '确定要退出吗?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: 'Some descriptions',\r\n            onOk:()=> {\r\n                memoryUtils.user={}\r\n                storageUtils.removeUser()\r\n                this.props.history.replace('/login')\r\n            },\r\n            onCancel() {\r\n            //   console.log('Cancel');\r\n            },\r\n          });\r\n    }\r\n\r\n    getRolesById=async ()=>{\r\n        const roleId = memoryUtils.user.roleId\r\n        let res = await getRoleById(roleId)\r\n        const menus = res.data.data.menus\r\n        // console.log(res.data.data.menus)\r\n        this.setState({\r\n            AuthMenus:menus\r\n        })\r\n\r\n    }\r\n    //判断当前登录用户对item是否有权限\r\n    hasAuth=(item)=>{\r\n        const {key,isPublic} = item\r\n        const {AuthMenus} = this.state\r\n        const roleId = memoryUtils.user.roleId\r\n        // console.log(roleId)\r\n\r\n        // let menus=['/home']\r\n        if(isPublic||AuthMenus.indexOf(key)!==-1)\r\n        {\r\n            // console.log('true',key)\r\n            return true\r\n        }\r\n        //如果用户有此item的某个子权限\r\n        else if(item.children)\r\n        {\r\n            return !!item.children.find(child => AuthMenus.indexOf(child.key)!==-1)\r\n        }\r\n        else\r\n        {\r\n            // console.log('false',key)\r\n            return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据menu 的数据数组生成标签数组\r\n     */\r\n    getMenuNodes = (menuList)=>\r\n    {\r\n        const path = this.props.location.pathname\r\n        return menuList.map(item =>{\r\n            //当前用户有item的权限，才去添加，显示相应的页面\r\n            if(this.hasAuth(item))\r\n            {\r\n                // console.log(this.hasAuth(item),item.key)\r\n                if(!item.children)\r\n                {\r\n                return (\r\n                    <Menu.Item key={item.key}>\r\n                        <Link to={item.key}>\r\n                            {item.icon}\r\n                            {item.title}\r\n                        </Link>\r\n                    </Menu.Item>\r\n                )\r\n                }\r\n                /**\r\n                 * 要确定默认展开的SubMenu，需要在有children的地方找到需要展开的那一项\r\n                 */\r\n                else\r\n                {\r\n                    //查找与当前请求路径匹配的子Item\r\n                    const cItem = item.children.find(cItem =>{\r\n                        return cItem.key===path\r\n                    })\r\n                    //如果存在，说明当前item所对应的子列表需要展开\r\n                    if(cItem)\r\n                        this.openKey = item.key\r\n                    return (\r\n                        <SubMenu key={item.key} title={\r\n                            <span>\r\n                            {item.icon}\r\n                            {item.title}\r\n                            </span>\r\n                    }>\r\n                            {/* 对item的children递归调用 */}\r\n                            {this.getMenuNodes(item.children)}\r\n                        </SubMenu>\r\n                    )\r\n                }\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    /**\r\n     * 根据路径获取当前页面的title\r\n     */\r\n     getTitle = () => {\r\n        // 得到当前请求路径\r\n        const path = this.props.location.pathname\r\n        let title\r\n        menuList.forEach(item => {\r\n          if (item.key===path) { // 如果当前item对象的key与path一样,item的title就是需要显示的title\r\n            title = item.title\r\n          } else if (item.children) {\r\n            // 在所有子item中查找匹配的\r\n            const cItem = item.children.find(cItem => path.indexOf(cItem.key)===0)\r\n            // 如果有值才说明有匹配的\r\n            if(cItem) {\r\n              // 取出它的title\r\n              title = cItem.title\r\n            }\r\n          }\r\n        })\r\n        return title\r\n      }\r\n\r\n    constructor()\r\n    {\r\n        super()\r\n        this.getRolesById()\r\n    }\r\n    componentDidMount()\r\n    {\r\n        this.getTime()\r\n    }\r\n    componentWillUnmount()\r\n    {\r\n        clearInterval(this.intervalId)\r\n    }\r\n\r\n    render() {\r\n\r\n        //如果内存中没有存贮user，说明没有登录\r\n        const user = memoryUtils.user\r\n        if(!user || !user._id)\r\n        {\r\n            //自动跳转到login\r\n            //在render中可以用Redirect来跳转，在事件回调中就要用编程式导航\r\n            return <Redirect to='/login'></Redirect>\r\n        }\r\n\r\n\r\n        // debugger\r\n        //最好可以放在componentWillMount(已废弃)\r\n        const menuNodes = this.getMenuNodes(menuList)\r\n        // console.log('menuNodes',menuNodes)\r\n        const path = this.props.location.pathname\r\n        const openKey = this.openKey\r\n        // const title = this.getTitle()\r\n        const {currentTime} = this.state\r\n        return (\r\n\r\n            <div className=\"admin\">\r\n                 <Layout className=\"totalLayout\">\r\n                    <Header className=\"header\">\r\n                        <div className=\"logo\" />\r\n                        {user!=null\r\n                           &&\r\n                        <div className=\"welComeTitle\" >\r\n                            欢迎您,{user.username}<span onClick={this.exit} className=\"exit\">退出</span>\r\n                        </div>\r\n                        }   \r\n\r\n                    </Header>\r\n                    <div className=\"header-bottom\">\r\n                            <div className=\"header-bottom-right\">\r\n                                <span className=\"curtime\">{currentTime}</span>\r\n                            </div>\r\n                    </div>\r\n                    <Content style={{ padding: '0 50px' }}>\r\n                        <Layout style={{ padding: '0px 0', height:'100%' }}>\r\n                            <Sider width={200} style={{height:'100%'}}>\r\n                            <Menu\r\n                                theme=\"dark\"\r\n                                mode=\"inline\"\r\n                                //根据路由确认默认选中\r\n                                // defaultSelectedKeys={[path]}//问题是如果输入根路径，第一次会匹配到'/'，导致/home无法匹配到\r\n                                selectedKeys={[path]}\r\n                                defaultOpenKeys={[openKey]}\r\n                            >\r\n                                {\r\n                                    menuNodes\r\n                                }\r\n                            </Menu>\r\n                            </Sider>\r\n                        <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n                            <Switch>\r\n                                <Route path='/home' component={Home}></Route>\r\n                                <Route path='/user' component={User}></Route>\r\n                                <Route path='/role' component={Role}></Route>\r\n                                <Route path='/order/appointOrder' component={AppointOrder}></Route>\r\n                                <Route path='/order/deliverOrder' component={DeliverOrder}></Route>\r\n                                <Redirect to='/home'></Redirect>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                    </Content>\r\n                    <Footer style={{ textAlign: 'center' }}>\r\n                    Blog System By lbw424\r\n                    </Footer>\r\n                </Layout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TotalLayout;","import React, { Component } from 'react';\r\nimport { Layout } from 'antd';\r\nimport './regist.less';\r\nimport {regist} from '../../api/index'\r\nimport {\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Checkbox,\r\n    Button,\r\n  } from 'antd';\r\n  \r\nconst { Option } = Select;\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 16 },\r\n    },\r\n  };\r\n\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 16,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\nclass Regist extends Component {\r\n    onFinish = async (values) => {\r\n        /**\r\n         * 验证后发送请求\r\n         */\r\n        const data = {\r\n            'username':values.username,\r\n            'password':values.password\r\n        }\r\n        let res = await regist(data)\r\n        // console.log('Received values of form: ', values);\r\n        console.log(res)\r\n        if(res.data.code === '200')\r\n        {\r\n            this.props.history.goBack()\r\n        }\r\n      };\r\n\r\n    prefixSelector = (\r\n    <Form.Item name=\"prefix\" noStyle>\r\n        <Select style={{ width: 70 }}>\r\n        <Option value=\"86\">+86</Option>\r\n        <Option value=\"87\">+87</Option>\r\n        </Select>\r\n    </Form.Item>\r\n    );\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"regist\">\r\n            <Layout className=\"layout\">\r\n                <Header className=\"header\">\r\n                  <div className=\"logo\" />\r\n                </Header>\r\n                <Content className=\"content\">\r\n\r\n                    <Form\r\n                        {...formItemLayout}\r\n                        name=\"register\"\r\n                        onFinish={this.onFinish}\r\n                        initialValues={{\r\n                            prefix: '86',\r\n                        }}\r\n                        scrollToFirstError\r\n                        >\r\n\r\n                        {/* <Form.Item\r\n                            name=\"email\"\r\n                            label=\"E-mail\"\r\n                            rules={[\r\n                            {\r\n                                type: 'email',\r\n                                message: 'The input is not valid E-mail!',\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your E-mail!',\r\n                            },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item> */}\r\n\r\n\r\n                        <Form.Item\r\n                            name=\"username\"\r\n                            label=\"Username\"\r\n                            tooltip=\"Your login UserName\"\r\n                            rules={[{ required: true, message: 'Please input your username!', whitespace: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                            ]}\r\n                            hasFeedback\r\n                        >\r\n                            <Input.Password />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"confirm\"\r\n                            label=\"Confirm\"\r\n                            dependencies={['password']}\r\n                            hasFeedback\r\n                            rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(_, value) {\r\n                                if (!value || getFieldValue('password') === value) {\r\n                                    return Promise.resolve();\r\n                                }\r\n                                return Promise.reject(new Error('The two passwords that you entered do not match!'));\r\n                                },\r\n                            }),\r\n                            ]}\r\n                        >\r\n                            <Input.Password />\r\n                        </Form.Item>\r\n{/* \r\n                        <Form.Item\r\n                            name=\"nickname\"\r\n                            label=\"Nickname\"\r\n                            tooltip=\"What do you want others to call you?\"\r\n                            rules={[{ required: true, message: 'Please input your nickname!', whitespace: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item> */}\r\n\r\n\r\n\r\n                        {/* <Form.Item\r\n                            name=\"phone\"\r\n                            label=\"Phone Number\"\r\n                            rules={[{ required: true, message: 'Please input your phone number!' }]}\r\n                        >\r\n                            <Input addonBefore={this.prefixSelector} style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n\r\n\r\n                        <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n                            <Row gutter={8}>\r\n                            <Col span={12}>\r\n                                <Form.Item\r\n                                name=\"captcha\"\r\n                                noStyle\r\n                                rules={[{ required: true, message: 'Please input the captcha you got!' }]}\r\n                                >\r\n                                <Input />\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <Button>Get captcha</Button>\r\n                            </Col>\r\n                            </Row>\r\n                        </Form.Item> */}\r\n\r\n                        {/* <Form.Item\r\n                            name=\"agreement\"\r\n                            valuePropName=\"checked\"\r\n                            rules={[\r\n                            {\r\n                                validator: (_, value) =>\r\n                                value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\r\n                            },\r\n                            ]}\r\n                            {...tailFormItemLayout}\r\n                        >\r\n                            <Checkbox>\r\n                            I have read the <a href=\"\">agreement</a>\r\n                            </Checkbox>\r\n                        </Form.Item> */}\r\n\r\n                        <Form.Item {...tailFormItemLayout}>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                            Register\r\n                            </Button>\r\n                        </Form.Item>\r\n                        </Form>\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>Blog System By lbw424</Footer>\r\n            </Layout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Regist;","/*\r\n应用的根组件\r\n*/\r\nimport React from 'react'//即使没用，定义组件也一定要引入\r\nimport {Component} from 'react'\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport Login from './pages/login/login.jsx'\r\nimport TotalLayout from './layout'\r\nimport Regist from './pages/regist/index'\r\n\r\nexport default class App extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            <BrowserRouter>\r\n                <Switch>{/*只匹配其中一个 */}\r\n                    {/* 根路由只有三个选择：登录、注册、总布局 */}\r\n                    <Route path='/login' component={Login}></Route>\r\n                    <Route path='/regist' component={Regist}></Route>\r\n                    <Route path='/' component={TotalLayout}></Route>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}","/**\r\n * 入口文件\r\n */\r\nimport React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport App from './App'\r\nimport memoryUtils from './utils/memoryUtils.js';\r\nimport storeUtils from './utils/storageUtils'\r\n\r\n/**\r\n * 读取local中的保存的user\r\n * 如果有，保存到内存中\r\n * 用于免登录，如果缓存中有，就直接读取到内存\r\n */\r\nconst user = storeUtils.getUser()\r\nmemoryUtils.user = user\r\n\r\n\r\n//渲染App组件\r\nReactDom.render(\r\n        <App/>,\r\n    document.getElementById('root')\r\n    )"],"sourceRoot":""}